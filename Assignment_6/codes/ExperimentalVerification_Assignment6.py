# -*- coding: utf-8 -*-
"""Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CrvB2M1Vh63MRJPAFOZywqmaN2ivZWVs
"""

import numpy as np
import matplotlib.pyplot as plt

sample_size=100000

#probability data -passing in math,phy,chem,their sum,their product
arr_probM=[]
arr_probP=[]
arr_probC=[]
arr_prob_Sum=[]
arr_prob_Prod=[]

sampling_data=20
rand_range=100


for i in range(0,sampling_data):
    sample_size=100000
     #student passed in 7 different ways
      #only single subject
    set_m=0          
    set_p=0           
    set_c=0           
      #exactly two subjects
    set_mp=0          
    set_pc=0          
    set_cm=0           
      #all three subjects
    set_mpc=0

     #distributing according to the given information 
     #10% probability of passing all three subjects
     #40% probability of passing exactly two subjects
     #25% probability of passing exactly one subject

    #creates random bias in choosing which two subjects in exactly two subjects case. 
    x=np.random.randint(1,rand_range)
    y=np.random.randint(1,rand_range)
    z=np.random.randint(1,rand_range)

    #creates random bias in choosing which subject in exactly one subject case
    x1=np.random.randint(1,rand_range)
    y1=np.random.randint(1,rand_range)
    z1=np.random.randint(1,rand_range)

    for j in range(0,sample_size):      

     #var_1 creates randomness in no.of subjects passed
      var_1=np.random.randint(0,100)
      if var_1<25:
        #var_2  creates randomness in choosing which subject
        var_2=np.random.randint(0,x+y+z)
        if var_2<x:
          set_m+=1
        elif var_2<x+y:
          set_p+=1
        else:
          set_c+=1
      elif var_1<65:
        #var_3  created randomness in choosing which two subjects  
        var_3=np.random.randint(0,x1+y1+z1)
        if var_3<x1:
          set_mp+=1
        elif var_3<x1+y1:
          set_pc+=1
        else:
          set_cm+=1   
      elif var_1<75:
        set_mpc+=1    
    #caculating individual probabilities
    setM=set_m+set_mp+set_cm+set_mpc
    setP=set_p+set_pc+set_mp+set_mpc
    setC=set_c+set_cm+set_pc+set_mpc
    
    probM=setM/sample_size
    probP=setP/sample_size
    probC=setC/sample_size
    # print(x,y,z,probM,probP,probC,probM+probP+probC,probM*probP*probC)
    arr_probM.append(probM)
    arr_probP.append(probP)
    arr_probC.append(probC)
    arr_prob_Sum.append(probM+probP+probC)
    arr_prob_Prod.append(probM*probP*probC)
    
    
arr_prob_Prod_10x=[10*x for x in arr_prob_Prod]
#plotting
plt.scatter(range(0,sampling_data),arr_prob_Sum,label="Experimental Pr(M)+Pr(P)+Pr(C)")
plt.scatter(range(0,sampling_data),arr_prob_Prod_10x,label="10x Experimental Pr(M)*Pr(P)*Pr(C)")
plt.plot(range(0,sampling_data),np.full(sampling_data,27/20),label="Theoritical Pr(M)+Pr(P)+Pr(C)")
plt.legend()
plt.xlabel("trails")
plt.show()
plt.scatter(range(0,sampling_data),arr_probM,label="Experimental Pr(M)")
plt.scatter(range(0,sampling_data),arr_probP,label="Experimental Pr(P)")
plt.scatter(range(0,sampling_data),arr_probC,label="Experimental Pr(C)")
plt.xlabel("trails")
plt.ylabel("probability")
plt.title("Probabilities of passing in different subjects")
plt.legend()
plt.show()

